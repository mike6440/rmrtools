function [sw,sz,saz,drct,sky] = SolRad(lat,lon, dt, watvap, p, k1, k2, l)%SOLARRADIANCE --	Radince, zenith, and azimuth%=====================================================================%[sw,sz,saz,drct,sky] = SolRad(lat,lon, dt, watvap, p, k1, k2, l)%%%% COMPUTE THE SOLAR RADIANCE%	sw = total solar flux through a horizontal surface% 	sz = zenith declination (deg)%	saz = solar azimuth (deg)%  drct = direct beam irradiance on a surface normal to the beam.%  sky = diffuse component on a horizontal surface%INPUT -%  lat, lon = latitude and longitude in degrees (N,E = +, S,W = -)  %  dt = datenum vector in UTC time%  watvap = integrated water vapor (g/m^2) -- use 5 for TWP, default = 3.%  p = pressure, default = 1013 hPa%  k1, k2 = aerosol absorbtion coefs, default = .3% l = ozone thickness, default = 0.3;%%You may omit parameters from right to left and the default values will be %used.  lat,lon, and dt are required.%%You can use a single lat/lon postion or a vector.  If a vector, the size must%agree with the size of dt.%%dt can be a single value or a vector.%%Functions used:% Ephem.m,  SolFlux.m, %Reynolds, 991110%=====================================================================% TESTING% clear% BNL% lat = 40.870833;  lon = -72.6166667; % bnl% dt0 = datenum(1999,11,10,17,0,0);% dt = dt0 + [-330:280]' / 1440;% ANCHORAGE% lat = 61;  lon = -149.6;% dt0 = datenum(1999,6,10,21,0,0);% dt = dt0 + [-170:220]' / 1440;% % nargin =  3;% fprintf('Testing SolRad.m\n');% END TESTING%fprintf('SolarRadiance: nargin = %d\n',nargin);if nargin < 8	l = 0.3;endif nargin < 7	k2 = 0.3;endif nargin < 6	k1 = 0.3;endif nargin < 5	p = 1013;endif nargin < 4	watvap = 3;endif nargin < 3, 	error('too few params');  endd2r = pi/180;%%%% USE EPHEM.M TO COMPUTE SOLAR POSITION[saz,sz] = ephem2(lat,lon,dt);%%% SHORTWAVE IRRADIANCE% the zenith angle = sz (degs), % the integrated water vapor is set in the input parameters (TWP = 5).%%if watvap(1) < 0,   drct = s;   sky = 0;	sw = s .* cos(sz .* d2r);else	[drct,sky] = solflux(sz,watvap,p,k1,k2,l);	sw = sky + drct .* cos(sz .* d2r);	endix = find(sw < 0);if length(ix) > 0,	sw(ix) = zeros(size(ix));endix = find(sky < 0);if length(ix) > 0,	sky(ix) = zeros(size(ix));endreturn