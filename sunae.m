function [a,el] =  sunae(lat,lon,year,day,t)%clear, lat=10; lon=165; year=1999; day=172; t=6;%SUNAE -- LOCAL SOLAR AZIMUTH AND ELEVATION%[a,e] =  sunae(lat, lon,year,day,hr)%========================================================================% This program calculates the local azimuth and elevation of the sun at a% specified location an time using an approximation to the equations used % to generate the nautical almanac.%%Input parameters%  lat         = The local latitude (North is positive)%  lon         = The local longitude in degrees west of Greewich%  year (utc)  = year number (eg. 1995)%  day (utc)   = The day number of the year starting with 1 for January 1, %                 except in leap years when 1 should be subtracted from the%                 day number before March 1%  t           = The hour of day in utc (floating point)%%Output parameters%  A           = Azimuthal angle of the sun (positive is east of south)%  E           = Elevation of the sun%From SUNY-albany, modified by Reynolds 981020%sunae1: version 1 modified by reynolds for matlab%note (981117) there is a problem with the azimuth calculation here.%===============================================================%=================% check parameters%=================%if nargin ~= 5, error('sunae: wrong number of parameters'); end%=================%constants%=================rad = pi/180;twopi = 2.*pi;% leap yearusun = ones(size(year));npts = length(usun);%=================================% TIME is the number of f.p. days that have elapsed since% the start of 1980.%=================================dt = datenum(year,1,1) + (day-1) + t/24;time = dt - datenum(1980,1,1);delyr = year - 1980 * ones(size(t));%delyr = year-1980*usun;%  leap = floor(delyr/4);%  t = hr + (min + sec/60)/60; %  DELETE, always use GMT + zone*usun - dasvtm*usun;%  time = delyr*365 + leap + day - 1*usun + t/24.;%  if (delyr(1) == leap(1)*4) %    time = time-1*usun;%  end%  if (delyr(1) < 0 & delyr(1) ~= leap*4)%    time = time-1*usun;%  endtheta = (360 .* time ./ 365.25) .* rad;g = -0.031271 - 4.53963e-7 .* time + theta;  %el = 4.900968*usun+3.67474e-7*time+...el = 4.900968 + 3.67474e-7 .* time+...     (0.033434 - 2.3e-9 .* time) .* sin(g) + 0.000349 .* sin(2 .* g) + theta;eps = 0.409140 - 6.2149e-9 .* time;sel = sin(el);a1 = sel.*cos(eps);a2 = cos(el);ra = atan2(a1,a2);ix = find(ra < 0);if length(ix) > 0   ra(ix) = ra(ix)+twopi;end;decl = asin(sel .* sin(eps));st = 1.759335 + twopi .* (time ./ 365.25 - delyr) + 3.694e-7 .* time;ix = find(st >= twopi);if length(ix) > 0,    st(ix) = st(ix) - twopi;ends = st + (t .* 15 + lon) .* rad;ix = find( s >= twopi );if length(ix) > 0,   s(ix) = s(ix) - twopi;endh = ra - s;phi = lat .* rad;q = sin(phi) .* sin(decl) + cos(phi) .* cos(decl) .* cos(h);ets = asin(q);%==================%azimuth%==================a = asin(cos(decl).*sin(h)./cos(ets))/rad;ix = find(sin(ets) >= sin(decl ./ sin(phi)));  % TEST <if length(ix) > 0,   a(ix) = 180 - a(ix);endix = find(a < 0);if length(ix) > 0   a(ix) = a(ix) + 360;end%%%%%%%%%%%%%%%%%%%%%% REFRACTION%%%%%%%%%%%%%%%%%%%%%el0 = ets / rad;r = 3.51561 .* (0.1594 + 0.0196 .* el0 + 0.00002 .* el0^2)...   ./ (1 + 0.505 .* el0 + 0.0845 .* el0 .^ 2);el = el0 + r;%===============%elevation angle final%===============ze0 = 90 - el0;ze = 90 - el;a;[ze0, ze, a]return;