function [dtsunrise, dtnoon, dtsunset, tzone] = apnoon(yyyy,MM,dd,lat,lon,printflag)% APNOON -- COMPUTE APPARENT NOON GIVEN THE DATA AND POSITION%    [dtsunrise, dtnoon, dtsunset, tzone] = apnoon(yyyy,MM,dd,lat,lon);%=========================================================================% compute exact time of sunrise, noon, and sunset anywhere on Earth%%input% yyyy,MM,dd = year, month, day% lat = latitude, +/-90 degrees% lon = longitude, +/- 180 degrees, East = +%% This routine uses the SolRad() function.  It accounts for the % radius of the solar disk (0.53 deg) and the astronomical mean refraction% of 34'.  It has been tested against the JPL epheremeris generator% ssd.jpl.nasa.gov/cgi-bin/eph and agrees generally to less than one minute% in times and about 0.1 deg in azimuth or elevation.%% functions used: SolRad(), dt2jdf(), %see file G4032/A%reynolds 010302%rmr 140619 -- v3%rmr 140826 -- v4 fixed a bug and improved human interface%rmr 170424 -- v5 extend sunset hours, line 70%==========================================================================%TEST%clear; lat = 47.6; lon = -122.3; yyyy = 2017; MM = 6; dd = 21; printflag = 1; nargin = 6;%disp('apnoon testing');if nargin == 0 | nargin == 3	disp('1-BNL, 2-LANL, 3-MOSAIC, 4-Euclid, 5-SGP, 6-manual input');	k=input('Enter site number: ');	%k = menu('Location','BROOKHAVEN LAB:','Yaphank','Manus','Seattle', 'Enter');	switch k		case 1, lon = -72.616667; lat = 40.870833; 			fprintf('BROOKHAVEN LABORATORY (%.5f, %.5f)\n', lat, lon);		case 2, lat = 35.850255;   lon = -106.2727;			fprintf('LANL Beta Site (%.5f, %.5f)\n', lat, lon);		case 3, lon = 18; lat = 72;			fprintf('MOSAIC (%.5f, %.5f)\n', lat, lon);		case 4, lon = -122.28807; lat = 47.60332;			fprintf('214 EUCLID SEATTLE (%.5f, %.5f)\n', lat, lon);		case 5, lat=36.605; lon=-97.485;			fprintf('ARM SGP (%.5f, %.5f)\n', lat, lon);		case 6,			disp('MANUAL INPUT');			lat = input('Enter Latitude (decimal degrees): ');			lon = input('Enter Longitude: ');	endend% CURRENT TIME ZONEtzone = fix((abs(lon) + 7.5) ./ 15) .* sign(lon);  %v3if nargin == 0	[yyyy,MM,dd,hh,mm,ss] = datevec(now);endif nargin == 5	printflag = 0;end% THIS JULIAN DAYjd = fix(datenum(yyyy,MM,dd) - datenum(yyyy,1,1)) + 1;%utc sunrise =  local time -tzonedt1 = datenum(yyyy,MM,dd) - tzone/24 + 4/24; % utc <->well  before dawn 04 h stddt2 = datenum(yyyy,MM,dd+1) - tzone/24 - 2/24; % utc <-> well after sunset 20 h stddt = [dt1:1/1440:dt2]';%=========================% parameters for sunrise and sunset% see "glossary of meteorology" and also% "Physical meteorology", Johnson, 1954%see also JPL ephemeris at ssd.jpl.nasa.gov/cgi-bin/eph%==========================e_disk = 1919/3600;   % the apparent solar disk diameter is ~ 34 minutes of arc.% compute the solar azimuth and elevation[az, ze] = ephem(lat, lon, dt);e = 90 - ze;  % observed elevation including refraction% find noonlen =  length(dt);ix = find(e == max(e));dtnoon = dt(ix);% SUNRISEiy = find(e == min(e(1:ix)));if e(iy) + e_disk/2 > 0	%fprintf('Apnoon sunrise problems: the sun top is always above the horizon. Return inf.\n');	dtsunrise = inf; else	dtsunrise = interp1(e(iy:ix),dt(iy:ix), -e_disk/2);	[arise,zrise] = ephem(lat,lon,dtsunrise);end% SUNSETiy = find(e == min(e(ix:len)));if e(iy) + e_disk/2 > 0	%fprintf('Apnoon sunset problems: the sun top is always above the horizon. Return inf.\n');	dtsunset=inf;	else	dtsunset = interp1(e(ix:iy), dt(ix:iy), -e_disk/2);	[aset,zset] = ephem(lat,lon,dtsunset);end% FINE TUNE FOR EXACT NOONdt1 = dtnoon - .1/1440;dt2 = dtnoon + .1/1440;dt = [dt1:1/86400:dt2]';[a,z] = ephem(lat,lon,dt);e = 90-z;ix = find(z == min(z));dtnoon = dt(ix);enoon = e(ix);anoon = a(ix);if nargin == 0 | nargin == 3 | printflag == 1	fprintf('   observer height = 0 m, Timezone = %d,  LOCAL STANDARD TIMES\n',tzone);	fprintf('   SUNRISE (upper limb)    = %s, azimuth = %.1f\n',...		dtstr(dtsunrise +tzone/24),arise);	fprintf('   NOON (disk center)      = %s, azimuth = %.1f, elevation = %.1f\n',...		dtstr(dtnoon+ tzone/24), anoon, enoon);	fprintf('   SUNSET (upper limb)     = %s, azimuth = %.1f\n',...		dtstr(dtsunset + tzone/24),aset);	fprintf('   Day length              = %.3f hours\n', (dtsunset-dtsunrise)*24);endreturn