function [az, sz] = ephem(alat, alon, dt) %[az, sz] = ephem(alat, alon, dt)%=====================================================================% INPUT% alat, alon = latitude and longitude in degrees% dt = datenum number% OUTPUT%az=solar az%sz= zenith angle %The ephem function came from P. Minnett%Reynolds, 971029%=====================================================================if nargin < 2, 	error('too few params');  end%% constantsd2r = pi / 180;  r2d = 1. ./ d2r;s0 = 1367;s1 = -105;   	s2 = 596.2;   	s3 = 4.3;   	s4 = -12.7;c1 = -429.3;   	c2 = -2.1;   	c3 = 19.3;%% coordinates in radiansrlat = alat .* d2r;rlon = alon .* d2r;colatr = (90 - alat) * d2r;%=================%time check, if we are making a computation at a single time, % we must do it for that time plus a small increment so,%in the end we can adjust the azimuth%==================[y,jdf]=dt2jdf(dt);jd=fix(jdf);tutc=rem(jdf,1)*24;an = fix(jdf) - 0.5 + rem(jdf,1);tlength = length(an);%an = jd - 0.5 + tutc ./ 24;%if length(an) == 1%	tutc = [tutc; tutc + 1e-6];%	jd = [jd; jd];%	an = jd - 0.5 + tutc ./ 24;%	tlength = 1;%else%	tlength = length(an);%endal = 280.460 + 0.9856474 .* an;al = rem(al,360);ix = find(al < 0 );if length(ix) > 0	al(ix) = al(ix) + 360;end%% CALCULATE MEAN ANOMOLYg = 357.528 + 0.9856003 .* an;g = rem(g,360);ix = find(g < 0);if length(ix) > 0,	g(ix) = g(ix) + 360 .* ones(size(ix));endgr = g * d2r;% SUN EARTH DISTANCE AND NORMAL INSOLATIONr = 1.00014 - 0.01671 .* cos(gr) - 0.00014 .* cos(2 * gr);s = s0 ./ (r .* r);%%fprintf('E-S distance, s0 = %10.3f,   %10.3f\n', r,s);%% CALCULATE ECLIPTIC LONGITUDEalambda = al + 1.915 .* sin(gr) + 0.020 .* sin(2*gr);rlambda = alambda * d2r;%% ECLIPTIC OBLIQUITYepsilon = 23.439 - 0.0000004 .* an;%% RIGHT ASCENSIONte = tan(epsilon * 0.5 .* d2r);te = te .* te;alpha = alambda - r2d .* te .* sin( 2 * rlambda ) + ...	0.5 .* r2d .* te .* te .* sin(4 * rlambda);%% SOLAR DECLINATION FOR THIS DAYsin_dec = sin(epsilon * d2r) .* sin(rlambda);solar_dec = asin(sin_dec);cos_dec = cos(solar_dec);eq_time = ( al - alpha ) .* 4 ./ 60;s_hour = tutc + eq_time;hour_ang = pi * ( s_hour - 12 ) / 12 + rlon;cos_h = cos(hour_ang);c_solar_z = sin(rlat) .* sin_dec + cos(rlat) .* cos_dec .* cos_h;s_z = acos(c_solar_z);% CORRCT AZIMUTH -- locate slope of the zenith anglezz = 0;if length(s_z) > 1,	zz = diff(s_z);                  % slope of s_z, increasing or decreasing	zz = [zz; zz(length(zz))];       % to make the lengths the sameend%%% ZENITH ANGLEsz = s_z * r2d;											% Correct for E-W%%% AZIMUTH ANGLEs_az = ( cos(pi * 0.5 - solar_dec) - cos(colatr) .* c_solar_z) ...	./ ( sin(colatr) .* sin(s_z) );az = acos(s_az) * r2d;% AZIMUTH CORRECTION -- where zenith angle is increasingif length(sz) > 0,	ix = find(zz > 0);	if length(ix) > 0,		az(ix) = 360 .* ones(size(ix)) - az(ix);	endend%SINGLE POINT CALCif tlength == 1	az = az(1);	sz = sz(1);endreturn