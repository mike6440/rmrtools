function [sz_rel, saz_rel]=RelativeSolarVector(saz,sz,az,pitch,roll)%%function [sz_rel, saz_rel]=RelativeSolarVector(saz,sz,az,pitch,roll)%======================================================================% calculates the angle between the solar ray and sensor normal% inputs in degrees%  sz  solar zenith angle%  saz solar azimuth angle%  az  ship heading (compass)%  pitch ship pitch (positive bow up)%  roll  ship roll  (positive port up)% reynolds 990710% v102 060726 rmr -- checked operation%======================================================================% TEST -- use these two lines on the command line to call the function% npts = 8; n=ones(npts,1); sz=10*n; saz = 45*n; az = [0:npts-1]' .* 360 ./ npts; pitch = 10*n; roll=0*n;% [sz_rel, saz_rel] = alphacalc(saz,sz,az,pitch,roll); [sz sz_rel saz saz_rel]d2r=(2*pi)/360;% sines and cosinesSsz = sin(sz * d2r);Csz = cos(sz * d2r);Ssaz = sin(saz * d2r);Csaz = cos(saz * d2r);% calculate coordinates of solar beam with unit lengtha1 = Ssz .* Ssaz;  a2 = Ssz .* Csaz;  a3 = Csz;amag = (a1.*a1 + a2.*a2 + a3.*a3);%TEST fprintf('Direct normal unit vector: (%.3f, %.3f, %.3f) = %.3f\n',a1,a2,a3, amag);%======================%MATRIX ROTATION TRANSFORMS% must be made one at a time% until I learn how to do it right%=========================aplat = ones(3,length(pitch)); % 3xn matrix, each column is one vectorfor i = 1:length(pitch)		if isnan(pitch(i) .* roll(i) .* az(i))		aplat(1,i)=nan; aplat(2,i)=nan; aplat(3,i)=nan; 	else					%=======================		% We find the transform matrix to convert a vector from the platform frame of ref		% to the Earth frame of ref		%=======================		[x,  T ] = RotationTransform([0 0 1]', pitch(i), roll(i), az(i));				%====================		%convert the solar vector from earth frame to platform frame		% by inverting the T matrix		%====================		aplat(:,i) = T^-1 * [a1(i), a2(i), a3(i)]';	endendsz_rel = acos(aplat(3,:))' ./ d2r;saz_rel = CompassCheck(atan2(aplat(1,:)',aplat(2,:)') / d2r);return