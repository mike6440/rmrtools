function [ia, ib] = MakeTimeBlocks(tx,dt)% function [ia, ib] = MakeTimeBlocks(tx,dt)% ----------------------------------------------------------------% Find the indices in the tx vector that mark times that % are such that%     tx(ia(i)) >= dt(i)  and tx(ib(i)) < dt(i+1).% Note that %   ia(1) = 1, and %   ib(Npts) = length(tx),% where%   Npts = length(tx);% % INPUT:%  tx = start time for input time array, high resolution%  dt = the starting times for each time in the output series% output:%  ia = indexes >= dt(i)%  ib = indexes < dt(i+1)% % NOTE -- the time series must be monotonic.  Below is an example of code% to remove all points that might be out of order.% % make monotonic% ix = find(diff(tx)<=0);% while length(ix) > 0% 	fprintf('Force tx to be monotonic...\n');% 	% 	i1 = ix(length(ix))-1;% 	iy = find(tx(i1:Npts) - tx(i1) > 1/86400);% 	i2 = i1 + iy(1);% 	tx(i1+1:i2)=[];% 	for i = 1:Nvars% 		cmd = sprintf('%s(%d:%d) = [];',deblank(vars(i,:)),i1+1, i2);% 		fprintf('%s\n',cmd);% 		eval(cmd);% 	end% 	ix = find(diff(tx)<=0);% end% v200 060711 rmr -- we can have three inputs, the original time series,%   the start times of the new series and (optional) the averaging time.%   The averaging time, delt can be <,=,> than diff(dt).% -------------------------------------------------------------------%====================% CHECK THAT THE DESIRED TIME BLOCKS ARE INSIDE THE INPUT SERIES TIMES% SET ia AND ib TO NAN IF THE BLOCKS ARE OUTSIDE.%====================Npts = length(tx);Nout = length(dt);% all the indexes in the input seriesi = [1:Npts]';% interpolate to averaging indicesia = ceil(interp1(tx,i,dt(1:end-1)));ib = fix(interp1(tx,i,dt(2:end)));% THE FIRST POINT IN THE TIME BLOCK IS 1ix = find( ~isnan(ib) );if length(ix) > 1,    ia(min(ix)) = 1;end% FIND WHERE THERE ARE NO POINTS IN THE TIME BLOCKix = find(ib<ia);if length(ix) > 0,	ia(ix)=nan; ib(ix)=nan;endreturn