function [a,e] =  sunae(year,day,hr,min,sec,lat,long)%SUNAE -- LOCAL SOLAR AZIMUTH AND ELEVATION%[a,e] =  sunae(year,day,hr,min,sec,lat,long)%========================================================================% This program calculates the local azimuth and elevation of the sun at a% specified location an time using an approximation to the equations used % to generate the nautical almanac.%% Input parameters%  year       = year number (eg. 1995)%  day        = The day number of the year starting with 1 for January 1, %               except in leap years when 1 should be subtracted from the%               day number before March 1%  hr,min,sec = The time of day%  DELETE zone       = The local international time zone%  DELETE dasvtm     = 1 if daylight savings time in effect%  lat        = The local latitude (North is positive)%  long       = The local longitude in degrees west of Greewich%% Output parameters%  A          = Azimuthal angle of the sun (positive is east of south)%  E          = Elevation of the sun%From SUNY-albany, modified by Reynolds 981020%===============================================================usun = ones(size(year));npts = length(usun);rad = 0.017453293;twopi = 2.*pi;delyr = year-1980*usun;leap = floor(delyr/4);t = hr + (min + sec/60)/60; %  DELETE, always use GMT + zone*usun - dasvtm*usun;time = delyr*365 + leap + day - 1*usun + t/24.;if (delyr(1) == leap(1)*4)   time = time-1*usun;endif (delyr(1) < 0 & delyr(1) ~= leap*4)  time = time-1*usun;endtheta = (360*time/365.25)*rad;g = -0.031271*usun-4.53963e-7*time + theta;  el = 4.900968*usun+3.67474e-7*time+...     (0.033434*usun-2.3e-9*time).*sin(g)+0.000349*sin(2*g)+theta;eps = 0.409140*usun-6.2149e-9*time;sel = sin(el);a1 = sel.*cos(eps);a2 = cos(el);ra = atan2(a1,a2);for i = 1:npts;  if (ra(i) < 0 )     ra(i) = ra(i)+twopi;  end;end;decl = asin(sel.*sin(eps));st = 1.759335*usun+twopi*(time/365.25-delyr)+3.694e-7*time;for i = 1:npts;  if (st(i) >= twopi)     st(i) = st(i)-twopi;  end;end;s = st+(t*15+long*usun)*rad;for i = 1:npts;  if (s(i) >= twopi)     s(i) = s(i)-twopi;  end;end;h = ra-s;phi = lat*rad;q = sin(phi)*sin(decl)+cos(phi)*cos(decl).*cos(h);ets = asin(q);%r = 3.51561*(0.1594+0.0196*ets+0.00002*ets^2)/(1+0.505*ets+0.0845*ets^2);%e = ets+r;e = ets;a = asin(cos(decl).*sin(h)./cos(e))/rad;for i = 1:npts;  if (sin(e(i)) < sin(decl(i)/sin(phi)))    if (a(i) < 0)      a(i) = a(i)+360;    end    a(i) = 180-a(i);  end;end;e = 90 - e/rad;ix = find(a<0);if length(ix) > 0	a(ix) = a(ix) + 360;endreturn;